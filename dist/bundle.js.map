{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://american-to-commonwealth-converter/./src/americanToCommonwealthDictionary.js","webpack://american-to-commonwealth-converter/./src/contextUtils.js","webpack://american-to-commonwealth-converter/./src/textReplacer.js","webpack://american-to-commonwealth-converter/./src/contentScript.js"],"sourcesContent":["export const EXCEPTIONS = [\"fulfilling\"];\r\n\r\nexport const DICTIONARY = {\r\n  // Miscellaneous words\r\n  miscellaneous: {\r\n    aluminum: \"aluminium\",\r\n    chili: \"chilli\",\r\n    defense: \"defence\",\r\n    plow: \"plough\",\r\n    gray: \"grey\",\r\n    enroll: \"enrol\",\r\n    jewelry: \"jewellery\",\r\n    modeling: \"modelling\",\r\n    offense: \"offence\",\r\n    pediatric: \"paediatric\",\r\n    yogurt: \"yoghurt\",\r\n    fulfill: \"fulfil\",\r\n  },\r\n\r\n  // Words with -or suffix\r\n  orSuffix: {\r\n    color: \"colour\",\r\n    honor: \"honour\",\r\n    harbor: \"harbour\",\r\n    humor: \"humour\",\r\n    labor: \"labour\",\r\n    rumor: \"rumour\",\r\n    splendor: \"splendour\",\r\n    behavior: \"behaviour\",\r\n    flavor: \"flavour\",\r\n    vigor: \"vigour\",\r\n    candor: \"candour\",\r\n    clamor: \"clamour\",\r\n    endeavor: \"endeavour\",\r\n    fervor: \"fervour\",\r\n    glamor: \"glamour\",\r\n    rigor: \"rigour\",\r\n    savior: \"saviour\",\r\n    valor: \"valour\",\r\n    ardor: \"ardour\",\r\n    armor: \"armour\",\r\n    tumor: \"tumour\",\r\n    vapor: \"vapour\",\r\n    demeanor: \"demeanour\",\r\n    favorite: \"favourite\",\r\n    mold: \"mould\",\r\n    neighbor: \"neighbour\",\r\n    neighborhood: \"neighbourhood\",\r\n    parlor: \"parlour\",\r\n  },\r\n\r\n  // Words with -re suffix\r\n  reSuffix: {\r\n    center: \"centre\",\r\n    liter: \"litre\",\r\n    fiber: \"fibre\",\r\n    caliber: \"calibre\",\r\n    specter: \"spectre\",\r\n    meter: \"metre\",\r\n    theater: \"theatre\",\r\n    somber: \"sombre\",\r\n    luster: \"lustre\",\r\n    meager: \"meagre\",\r\n    kilometer: \"kilometre\",\r\n    saber: \"sabre\",\r\n    maneuver: \"manoeuvre\",\r\n  },\r\n\r\n  // Words with -ize/-ise suffix\r\n  izeSuffix: {\r\n    organiz: \"organis\",\r\n    steriliz: \"sterlis\",\r\n    analyz: \"analys\",\r\n    paralyz: \"paralys\",\r\n    centraliz: \"centralis\",\r\n    personaliz: \"personalis\",\r\n    memoriz: \"memoris\",\r\n    categoriz: \"categoris\",\r\n    characteriz: \"characteris\",\r\n    generaliz: \"generalis\",\r\n    recogniz: \"recognis\",\r\n    accessoriz: \"accessoris\",\r\n    prioritiz: \"prioritis\",\r\n    customiz: \"customis\",\r\n    harmoniz: \"harmonis\",\r\n    minimiz: \"minimis\",\r\n    maximiz: \"maximis\",\r\n    summariz: \"summaris\",\r\n    utiliz: \"utilis\",\r\n    visualiz: \"visualis\",\r\n    civiliz: \"civilis\",\r\n    coloniz: \"colonis\",\r\n    fertiliz: \"fertilis\",\r\n    patroniz: \"patronis\",\r\n    plagiariz: \"plagiaris\",\r\n    realiz: \"realis\",\r\n    proselytiz: \"proselytis\",\r\n    legitimiz: \"legitimis\",\r\n    delegimiz: \"delegimis\",\r\n    apologiz: \"apologis\",\r\n    formaliz: \"formalis\",\r\n    materializ: \"materialis\",\r\n    socializ: \"socialis\",\r\n    editorializ: \"editorialis\",\r\n    fantasiz: \"fantasis\",\r\n    hospitaliz: \"hospitalis\",\r\n    capitaliz: \"capitalis\",\r\n    enterpriz: \"enterpris\",\r\n    improviz: \"improvis\",\r\n    moderniz: \"modernis\",\r\n    pasteuriz: \"pasteuris\",\r\n    unioniz: \"unionis\",\r\n    localiz: \"localis\",\r\n    digitiz: \"digitis\",\r\n    digitizaliz: \"digitisalis\",\r\n    indivitualiz: \"indivitualis\",\r\n    incentiviz: \"incentivis\",\r\n    traumatiz: \"traumatis\",\r\n    humaniz: \"humanis\",\r\n    privatiz: \"privatis\",\r\n    nationaliz: \"nationalis\",\r\n    regionaliz: \"regionalis\",\r\n    globaliz: \"globalis\",\r\n    globalizaliz: \"globalisalis\",\r\n    economiz: \"economis\",\r\n    pragmatiz: \"pragmatis\",\r\n    conceptualiz: \"conceptualis\",\r\n    contextualiz: \"contextualis\",\r\n    monopoliz: \"monopolis\",\r\n    vitaliz: \"vitalis\",\r\n    mobiliz: \"mobilis\",\r\n    dramatiz: \"dramatis\",\r\n    empathiz: \"empathis\",\r\n    subsidiz: \"subsidis\",\r\n    demoniz: \"demonis\",\r\n    symboliz: \"symbolis\",\r\n    sympathiz: \"sympathis\",\r\n    theoriz: \"theoris\",\r\n    vandaliz: \"vandalis\",\r\n    verbaliz: \"verbalis\",\r\n    idealiz: \"idealis\",\r\n    victimiz: \"victimis\",\r\n    criminaliz: \"criminalis\",\r\n    industrializ: \"industrialis\",\r\n    vaporiz: \"vaporis\",\r\n    publiciz: \"publicis\",\r\n    sexualiz: \"sexualis\",\r\n    specializ: \"specialis\",\r\n    technologiz: \"technologis\",\r\n    agoniz: \"agonis\",\r\n    monetiz: \"monetis\",\r\n    stabiliz: \"stabilis\",\r\n    legaliz: \"legalis\",\r\n    authoriz: \"authoris\",\r\n    emphasiz: \"emphas\",\r\n    optimiz: \"optimis\",\r\n    jeopardiz: \"jeopardis\",\r\n    neutraliz: \"neutralis\",\r\n    criticiz: \"criticis\",\r\n    synchroniz: \"synchronis\",\r\n    mesmeriz: \"mesmeris\",\r\n    glamoriz: \"glamoris\",\r\n    masculiniz: \"masculinis\",\r\n    feminiz: \"feminis\",\r\n    mineraliz: \"mineralis\",\r\n    chrisianiz: \"chrisianis\",\r\n    normaliz: \"normalis\",\r\n    adulteriz: \"adulteris\",\r\n    adjectiviz: \"adjectivis\",\r\n    objectiviz: \"objectivis\",\r\n    subjectiviz: \"subjectivis\",\r\n    amorphiz: \"amorphis\",\r\n    antagoniz: \"antagonis\",\r\n    protagniz: \"protagnis\",\r\n    alcoholiz: \"alcoholis\",\r\n    allegoriz: \"allegoris\",\r\n    analogiz: \"analogis\",\r\n    commercializ: \"commercialis\",\r\n    emotionaliz: \"emotionalis\",\r\n    climatiz: \"climatis\",\r\n    acclimatiz: \"acclimatis\",\r\n    accessoriz: \"accessoris\",\r\n    baptiz: \"baptis\",\r\n  },\r\n\r\n  // Special context-sensitive words\r\n  contextSensitive: {\r\n    license: (context) => (context === \"verb\" ? \"license\" : \"licence\"),\r\n    practice: (context) => (context === \"verb\" ? \"practise\" : \"practice\"),\r\n  },\r\n\r\n  // Words with travel-related variations\r\n  travel: {\r\n    traveler: \"traveller\",\r\n    travelers: \"travellers\",\r\n    traveled: \"travelled\",\r\n    traveling: \"travelling\",\r\n  },\r\n};\r\n\r\n// These words have an issue with the suffix replacement logic\r\nexport const ER_TO_RE_WORDS = [\r\n  \"center\",\r\n  \"liter\",\r\n  \"fiber\",\r\n  \"caliber\",\r\n  \"specter\",\r\n  \"meter\",\r\n  \"theater\",\r\n  \"somber\",\r\n  \"luster\",\r\n  \"meager\",\r\n  \"kilometer\",\r\n  \"saber\",\r\n  \"maneuver\",\r\n];\r\n\r\nexport const PREFIXES = [\r\n  \"de\",\r\n  \"un\",\r\n  \"re\",\r\n  \"pre\",\r\n  \"post\",\r\n  \"dis\",\r\n  \"mis\",\r\n  \"non\",\r\n  \"ab\",\r\n];\r\n\r\nexport const SUFFIXES = [\r\n  \"ed\",\r\n  \"ing\",\r\n  \"s\",\r\n  \"e\",\r\n  \"es\",\r\n  \"al\",\r\n  \"ation\",\r\n  \"ations\",\r\n  \"ally\",\r\n  \"er\",\r\n  \"ers\",\r\n  \"ment\",\r\n  \"ments\",\r\n  \"ness\",\r\n  \"piece\",\r\n];\r\n","const VERB_INDICATORS = [\"to\", \"will\", \"should\", \"must\", \"can\", \"could\"];\r\n\r\nexport function determineContext(word, surroundingText) {\r\n  const words = surroundingText.split(/\\s+/);\r\n  const prevWord = words[words.length - 1].toLowerCase();\r\n  return VERB_INDICATORS.includes(prevWord) ? \"verb\" : \"noun\";\r\n}\r\n","import {\r\n  DICTIONARY,\r\n  EXCEPTIONS,\r\n  ER_TO_RE_WORDS,\r\n  PREFIXES,\r\n  SUFFIXES,\r\n} from \"./americanToCommonwealthDictionary.js\";\r\nimport { determineContext } from \"./contextUtils.js\";\r\n\r\nfunction capitaliseIfNeeded(prefix, original, replacement) {\r\n  // Handle case with prefix\r\n  if (prefix) {\r\n    let processedPrefix = prefix;\r\n\r\n    // Preserve the capitalisation of the prefix\r\n    if (prefix[0] === prefix[0].toUpperCase()) {\r\n      processedPrefix = prefix[0].toUpperCase() + prefix.slice(1).toLowerCase();\r\n    } else {\r\n      processedPrefix = prefix.toLowerCase();\r\n    }\r\n\r\n    return [processedPrefix + replacement, true];\r\n  }\r\n  // Handle case without prefix\r\n  else {\r\n    // Preserve the capitalisation of the original word\r\n    if (original[0] === original[0].toUpperCase()) {\r\n      replacement = replacement[0].toUpperCase() + replacement.slice(1);\r\n    }\r\n\r\n    return [replacement, false];\r\n  }\r\n}\r\n\r\nfunction handleErToReReplacement(prefix, base, suffix, auBase) {\r\n  // let replacementBase = capitaliseIfNeeded(prefix, base, auBase);\r\n  const [replacementBase, hasPrefix] = capitaliseIfNeeded(prefix, base, auBase);\r\n\r\n  // Handle special cases for -er to -re conversion with suffixes\r\n  let adjustedSuffix = suffix;\r\n  if (suffix.startsWith(\"e\")) {\r\n    adjustedSuffix = suffix.slice(1);\r\n  }\r\n  if (suffix === \"ing\") {\r\n    // For words like \"centering\" -> \"centring\", remove the trailing 'e'\r\n    return replacementBase.slice(0, -1) + adjustedSuffix;\r\n  }\r\n\r\n  return replacementBase + adjustedSuffix;\r\n}\r\n\r\nexport function replaceAmericanWithCommonwealthText(text) {\r\n  // Combine all dictionaries into a single lookup\r\n  const combinedDictionary = {\r\n    ...DICTIONARY.miscellaneous,\r\n    ...DICTIONARY.orSuffix,\r\n    ...DICTIONARY.reSuffix,\r\n    ...DICTIONARY.izeSuffix,\r\n    ...DICTIONARY.travel,\r\n  };\r\n\r\n  // Create a regex to match words with potential suffixes\r\n  const regex = new RegExp(\r\n    `\\\\b(${PREFIXES.join(\"|\")})?` +\r\n      `(${Object.keys(combinedDictionary).join(\"|\")})` +\r\n      `(${SUFFIXES.join(\"|\")})?\\\\b`,\r\n    \"gi\"\r\n  );\r\n\r\n  return text.replace(regex, (match, prefix = \"\", base, suffix = \"\") => {\r\n    // Skip exceptions\r\n    if (EXCEPTIONS.includes(match.toLowerCase())) return match;\r\n\r\n    // Handle special context-sensitive words\r\n    const contextWord = Object.keys(DICTIONARY.contextSensitive).find((w) =>\r\n      base.toLowerCase().includes(w)\r\n    );\r\n\r\n    if (contextWord) {\r\n      const context = determineContext(base, text);\r\n      return DICTIONARY.contextSensitive[contextWord](context);\r\n    }\r\n\r\n    // Handle ER to RE words\r\n    if (ER_TO_RE_WORDS.includes(base.toLowerCase())) {\r\n      return handleErToReReplacement(\r\n        prefix,\r\n        base,\r\n        suffix,\r\n        combinedDictionary[base.toLowerCase()]\r\n      );\r\n    }\r\n\r\n    // Standard replacement\r\n    const auBase = combinedDictionary[base.toLowerCase()];\r\n    if (!auBase) return match;\r\n\r\n    const [replacement, hasPrefix] = capitaliseIfNeeded(prefix, base, auBase);\r\n\r\n    return hasPrefix\r\n      ? replacement + suffix.toLowerCase()\r\n      : (prefix || \"\") + replacement + suffix.toLowerCase();\r\n  });\r\n}\r\n","import { replaceAmericanWithCommonwealthText } from \"./textReplacer.js\";\r\n\r\nfunction walkTextNodes(node) {\r\n  if (node.nodeType === Node.TEXT_NODE) {\r\n    // Avoid modifying input, textarea, and script elements\r\n    const parentElement = node.parentElement;\r\n    const forbiddenTags = [\"SCRIPT\", \"STYLE\", \"INPUT\", \"TEXTAREA\"];\r\n\r\n    if (parentElement && !forbiddenTags.includes(parentElement.tagName)) {\r\n      node.nodeValue = replaceAmericanWithCommonwealthText(node.nodeValue);\r\n    }\r\n  } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n    // Recursively walk child nodes\r\n    node.childNodes.forEach(walkTextNodes);\r\n  }\r\n}\r\n\r\nfunction processPage() {\r\n  walkTextNodes(document.body);\r\n}\r\n\r\n// Check if translations is enabled for the current site before processing\r\nasync function init() {\r\n  const response = await chrome.runtime.sendMessage({\r\n    type: \"checkSiteStatus\",\r\n    url: window.location.href,\r\n  });\r\n\r\n  if (!response.isDisabled) {\r\n    // Process existing content\r\n    processPage();\r\n\r\n    // Observe for changes in the DOM and re-run the transformation\r\n    // Might be removed if performance is an issue\r\n    const observer = new MutationObserver((mutations) => {\r\n      mutations.forEach((mutation) => {\r\n        mutation.addedNodes.forEach(walkTextNodes);\r\n      });\r\n    });\r\n\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true,\r\n    });\r\n  }\r\n}\r\n\r\ninit();\r\n"],"names":["EXCEPTIONS","DICTIONARY","miscellaneous","aluminum","chili","defense","plow","gray","enroll","jewelry","modeling","offense","pediatric","yogurt","fulfill","orSuffix","color","honor","harbor","humor","labor","rumor","splendor","behavior","flavor","vigor","candor","clamor","endeavor","fervor","glamor","rigor","savior","valor","ardor","armor","tumor","vapor","demeanor","favorite","mold","neighbor","neighborhood","parlor","reSuffix","center","liter","fiber","caliber","specter","meter","theater","somber","luster","meager","kilometer","saber","maneuver","izeSuffix","_defineProperty","organiz","steriliz","analyz","paralyz","centraliz","personaliz","memoriz","categoriz","characteriz","generaliz","recogniz","accessoriz","prioritiz","customiz","harmoniz","minimiz","maximiz","summariz","utiliz","visualiz","civiliz","coloniz","fertiliz","patroniz","plagiariz","realiz","proselytiz","legitimiz","delegimiz","apologiz","formaliz","materializ","socializ","editorializ","fantasiz","hospitaliz","capitaliz","enterpriz","improviz","moderniz","pasteuriz","unioniz","localiz","digitiz","digitizaliz","indivitualiz","incentiviz","traumatiz","humaniz","privatiz","nationaliz","regionaliz","globaliz","globalizaliz","economiz","pragmatiz","conceptualiz","contextualiz","monopoliz","vitaliz","mobiliz","dramatiz","empathiz","subsidiz","demoniz","symboliz","sympathiz","theoriz","vandaliz","verbaliz","idealiz","victimiz","criminaliz","industrializ","vaporiz","publiciz","sexualiz","specializ","technologiz","agoniz","monetiz","stabiliz","legaliz","authoriz","emphasiz","optimiz","jeopardiz","neutraliz","criticiz","synchroniz","mesmeriz","glamoriz","masculiniz","feminiz","mineraliz","chrisianiz","normaliz","adulteriz","adjectiviz","objectiviz","subjectiviz","amorphiz","antagoniz","protagniz","alcoholiz","allegoriz","analogiz","commercializ","emotionaliz","climatiz","acclimatiz","contextSensitive","license","context","practice","travel","traveler","travelers","traveled","traveling","ER_TO_RE_WORDS","PREFIXES","SUFFIXES","VERB_INDICATORS","capitaliseIfNeeded","prefix","original","replacement","toUpperCase","slice","toLowerCase","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","walkTextNodes","node","nodeType","Node","TEXT_NODE","parentElement","includes","tagName","nodeValue","text","combinedDictionary","_objectSpread","regex","RegExp","concat","join","replace","match","arguments","undefined","base","suffix","words","prevWord","contextWord","find","w","split","auBase","_capitaliseIfNeeded2","_slicedToArray","replacementBase","adjustedSuffix","startsWith","handleErToReReplacement","_capitaliseIfNeeded4","ELEMENT_NODE","childNodes","_init","_callee","_context","chrome","runtime","sendMessage","url","window","location","href","isDisabled","document","body","MutationObserver","mutations","mutation","addedNodes","observe","childList","subtree","apply","_next","_throw","init"],"sourceRoot":""}