{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://american-to-australian-translator/./src/americanToAustralianDictionary.js","webpack://american-to-australian-translator/./src/contextUtils.js","webpack://american-to-australian-translator/./src/textReplacer.js","webpack://american-to-australian-translator/./src/contentScript.js"],"sourcesContent":["export const EXCEPTIONS = [\"fulfilling\"];\r\n\r\nexport const DICTIONARY = {\r\n  // Miscellaneous words\r\n  miscellaneous: {\r\n    aluminum: \"aluminium\",\r\n    chili: \"chilli\",\r\n    defense: \"defence\",\r\n    plow: \"plough\",\r\n    gray: \"grey\",\r\n    enroll: \"enrol\",\r\n    jewelry: \"jewellery\",\r\n    modeling: \"modelling\",\r\n    offense: \"offence\",\r\n    pediatric: \"paediatric\",\r\n    tire: \"tyre\",\r\n    yogurt: \"yoghurt\",\r\n    fulfill: \"fulfil\",\r\n  },\r\n\r\n  // Words with -or suffix\r\n  orSuffix: {\r\n    color: \"colour\",\r\n    honor: \"honour\",\r\n    harbor: \"harbour\",\r\n    humor: \"humour\",\r\n    labor: \"labour\",\r\n    rumor: \"rumour\",\r\n    splendor: \"splendour\",\r\n    behavior: \"behaviour\",\r\n    flavor: \"flavour\",\r\n    vigor: \"vigour\",\r\n    candor: \"candour\",\r\n    clamor: \"clamour\",\r\n    endeavor: \"endeavour\",\r\n    fervor: \"fervour\",\r\n    glamor: \"glamour\",\r\n    rigor: \"rigour\",\r\n    savior: \"saviour\",\r\n    valor: \"valour\",\r\n    ardor: \"ardour\",\r\n    armor: \"armour\",\r\n    tumor: \"tumour\",\r\n    vapor: \"vapour\",\r\n    demeanor: \"demeanour\",\r\n    favorite: \"favourite\",\r\n    mold: \"mould\",\r\n    neighbor: \"neighbour\",\r\n    neighborhood: \"neighbourhood\",\r\n    parlor: \"parlour\",\r\n  },\r\n\r\n  // Words with -re suffix\r\n  reSuffix: {\r\n    center: \"centre\",\r\n    liter: \"litre\",\r\n    fiber: \"fibre\",\r\n    caliber: \"calibre\",\r\n    specter: \"spectre\",\r\n    meter: \"metre\",\r\n    theater: \"theatre\",\r\n    somber: \"sombre\",\r\n    luster: \"lustre\",\r\n    meager: \"meagre\",\r\n    kilometer: \"kilometre\",\r\n    saber: \"sabre\",\r\n    maneuver: \"manoeuvre\",\r\n  },\r\n\r\n  // Words with -ize/-ise suffix\r\n  izeSuffix: {\r\n    organiz: \"organis\",\r\n    steriliz: \"sterlis\",\r\n    analyz: \"analys\",\r\n    centraliz: \"centralis\",\r\n    personaliz: \"personalis\",\r\n    centraliz: \"centralis\",\r\n    memoriz: \"memoris\",\r\n    categoriz: \"categoris\",\r\n    characteriz: \"characteris\",\r\n    generaliz: \"generalis\",\r\n    recogniz: \"recognis\",\r\n    accessoriz: \"accessoris\",\r\n    prioritiz: \"prioritis\",\r\n    customiz: \"customis\",\r\n    harmoniz: \"harmonis\",\r\n    minimiz: \"minimis\",\r\n    maximiz: \"maximis\",\r\n    summariz: \"summaris\",\r\n    utiliz: \"utilis\",\r\n    visualiz: \"visualis\",\r\n    civiliz: \"civilis\",\r\n    coloniz: \"colonis\",\r\n    fertiliz: \"fertilis\",\r\n    patroniz: \"patronis\",\r\n    plagiariz: \"plagiaris\",\r\n    realiz: \"realis\",\r\n    proselytiz: \"proselytis\",\r\n    legitimiz: \"legitimis\",\r\n    delegimiz: \"delegimis\",\r\n    apologiz: \"apologis\",\r\n    formaliz: \"formalis\",\r\n    materializ: \"materialis\",\r\n    socializ: \"socialis\",\r\n    editorializ: \"editorialis\",\r\n    fantasiz: \"fantasis\",\r\n    hospitaliz: \"hospitalis\",\r\n    capitaliz: \"capitalis\",\r\n    enterpriz: \"enterpris\",\r\n    improviz: \"improvis\",\r\n    moderniz: \"modernis\",\r\n    pasteuriz: \"pasteuris\",\r\n    unioniz: \"unionis\",\r\n    feminiz: \"feminis\",\r\n    localiz: \"localis\",\r\n    digitiz: \"digitis\",\r\n    digitizaliz: \"digitisalis\",\r\n    indivitualiz: \"indivitualis\",\r\n    incentiviz: \"incentivis\",\r\n    traumatiz: \"traumatis\",\r\n    humaniz: \"humanis\",\r\n    privatiz: \"privatis\",\r\n    nationaliz: \"nationalis\",\r\n    regionaliz: \"regionalis\",\r\n    globaliz: \"globalis\",\r\n    globalizaliz: \"globalisalis\",\r\n    economiz: \"economis\",\r\n    pragmatiz: \"pragmatis\",\r\n    conceptualiz: \"conceptualis\",\r\n    contextualiz: \"contextualis\",\r\n  },\r\n\r\n  // Special context-sensitive words\r\n  contextSensitive: {\r\n    license: (context) => (context === \"verb\" ? \"license\" : \"licence\"),\r\n    practice: (context) => (context === \"verb\" ? \"practise\" : \"practice\"),\r\n  },\r\n\r\n  // Words with travel-related variations\r\n  travel: {\r\n    traveler: \"traveller\",\r\n    traveler: \"travellers\",\r\n    traveled: \"travelled\",\r\n    traveling: \"travelling\",\r\n  },\r\n};\r\n\r\nexport const ER_TO_RE_WORDS = [\r\n  \"center\",\r\n  \"liter\",\r\n  \"fiber\",\r\n  \"caliber\",\r\n  \"specter\",\r\n  \"meter\",\r\n  \"theater\",\r\n  \"somber\",\r\n  \"luster\",\r\n  \"meager\",\r\n  \"kilometer\",\r\n  \"saber\",\r\n  \"maneuver\",\r\n];\r\n\r\nexport const PREFIXES = [\"de\", \"un\", \"re\", \"pre\", \"post\", \"dis\", \"mis\", \"non\"];\r\n\r\nexport const SUFFIXES = [\r\n  \"ed\",\r\n  \"ing\",\r\n  \"s\",\r\n  \"e\",\r\n  \"es\",\r\n  \"al\",\r\n  \"ation\",\r\n  \"ations\",\r\n  \"ally\",\r\n  \"er\",\r\n  \"ers\",\r\n  \"ment\",\r\n  \"ments\",\r\n];\r\n","const VERB_INDICATORS = [\"to\", \"will\", \"should\", \"must\", \"can\", \"could\"];\r\n\r\nexport function determineContext(word, surroundingText) {\r\n  const words = surroundingText.split(/\\s+/);\r\n  const prevWord = words[words.length - 1].toLowerCase();\r\n  return VERB_INDICATORS.includes(prevWord) ? \"verb\" : \"noun\";\r\n}\r\n","import {\r\n  DICTIONARY,\r\n  EXCEPTIONS,\r\n  ER_TO_RE_WORDS,\r\n  PREFIXES,\r\n  SUFFIXES,\r\n} from \"./americanToAustralianDictionary.js\";\r\nimport { determineContext } from \"./contextUtils.js\";\r\n\r\nfunction capitaliseIfNeeded(prefix, original, replacement) {\r\n  // Handle case with prefix\r\n  if (prefix) {\r\n    let processedPrefix = prefix;\r\n\r\n    // Preserve the capitalisation of the prefix\r\n    if (prefix[0] === prefix[0].toUpperCase()) {\r\n      processedPrefix = prefix[0].toUpperCase() + prefix.slice(1).toLowerCase();\r\n    } else {\r\n      processedPrefix = prefix.toLowerCase();\r\n    }\r\n\r\n    return [processedPrefix + replacement, true];\r\n  }\r\n  // Handle case without prefix\r\n  else {\r\n    // Preserve the capitalisation of the original word\r\n    if (original[0] === original[0].toUpperCase()) {\r\n      replacement = replacement[0].toUpperCase() + replacement.slice(1);\r\n    }\r\n\r\n    return [replacement, false];\r\n  }\r\n}\r\n\r\nfunction handleErToReReplacement(prefix, base, suffix, auBase) {\r\n  // let replacementBase = capitaliseIfNeeded(prefix, base, auBase);\r\n  const [replacementBase, hasPrefix] = capitaliseIfNeeded(prefix, base, auBase);\r\n\r\n  // Handle special cases for -er to -re conversion with suffixes\r\n  let adjustedSuffix = suffix;\r\n  if (suffix.startsWith(\"e\")) {\r\n    adjustedSuffix = suffix.slice(1);\r\n  }\r\n  if (suffix === \"ing\") {\r\n    // For words like \"centering\" -> \"centring\", remove the trailing 'e'\r\n    return replacementBase.slice(0, -1) + adjustedSuffix;\r\n  }\r\n\r\n  return replacementBase + adjustedSuffix;\r\n}\r\n\r\nexport function replaceAmericanWithAustralianText(text) {\r\n  // Combine all dictionaries into a single lookup\r\n  const combinedDictionary = {\r\n    ...DICTIONARY.miscellaneous,\r\n    ...DICTIONARY.orSuffix,\r\n    ...DICTIONARY.reSuffix,\r\n    ...DICTIONARY.izeSuffix,\r\n    ...DICTIONARY.travel,\r\n  };\r\n\r\n  // Create a regex to match words with potential suffixes\r\n  const regex = new RegExp(\r\n    `\\\\b(${PREFIXES.join(\"|\")})?` +\r\n      `(${Object.keys(combinedDictionary).join(\"|\")})` +\r\n      `(${SUFFIXES.join(\"|\")})?\\\\b`,\r\n    \"gi\"\r\n  );\r\n\r\n  return text.replace(regex, (match, prefix = \"\", base, suffix = \"\") => {\r\n    // Skip exceptions\r\n    if (EXCEPTIONS.includes(match.toLowerCase())) return match;\r\n\r\n    // Handle special context-sensitive words\r\n    const contextWord = Object.keys(DICTIONARY.contextSensitive).find((w) =>\r\n      base.toLowerCase().includes(w)\r\n    );\r\n\r\n    if (contextWord) {\r\n      const context = determineContext(base, text);\r\n      return DICTIONARY.contextSensitive[contextWord](context);\r\n    }\r\n\r\n    // Handle ER to RE words\r\n    if (ER_TO_RE_WORDS.includes(base.toLowerCase())) {\r\n      return handleErToReReplacement(\r\n        prefix,\r\n        base,\r\n        suffix,\r\n        combinedDictionary[base.toLowerCase()]\r\n      );\r\n    }\r\n\r\n    // Standard replacement\r\n    const auBase = combinedDictionary[base.toLowerCase()];\r\n    if (!auBase) return match;\r\n\r\n    const [replacement, hasPrefix] = capitaliseIfNeeded(prefix, base, auBase);\r\n\r\n    return hasPrefix\r\n      ? replacement + suffix.toLowerCase()\r\n      : (prefix || \"\") + replacement + suffix.toLowerCase();\r\n  });\r\n}\r\n","import { replaceAmericanWithAustralianText } from './textReplacer.js';\r\n\r\nfunction walkTextNodes(node) {\r\n  if (node.nodeType === Node.TEXT_NODE) {\r\n    // Avoid modifying input, textarea, and script elements\r\n    const parentElement = node.parentElement;\r\n    const forbiddenTags = ['SCRIPT', 'STYLE', 'INPUT', 'TEXTAREA'];\r\n    \r\n    if (parentElement && !forbiddenTags.includes(parentElement.tagName)) {\r\n      node.nodeValue = replaceAmericanWithAustralianText(node.nodeValue);\r\n    }\r\n  } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n    // Recursively walk child nodes\r\n    node.childNodes.forEach(walkTextNodes);\r\n  }\r\n}\r\n\r\nfunction processPage() {\r\n  walkTextNodes(document.body);\r\n}\r\n\r\n// Run the transformation when the page loads\r\nprocessPage();\r\n\r\nconst observer = new MutationObserver((mutations) => {\r\n  mutations.forEach((mutation) => {\r\n    mutation.addedNodes.forEach(walkTextNodes);\r\n  });\r\n});\r\n\r\nobserver.observe(document.body, {\r\n  childList: true,\r\n  subtree: true\r\n});"],"names":["EXCEPTIONS","DICTIONARY","miscellaneous","aluminum","chili","defense","plow","gray","enroll","jewelry","modeling","offense","pediatric","tire","yogurt","fulfill","orSuffix","color","honor","harbor","humor","labor","rumor","splendor","behavior","flavor","vigor","candor","clamor","endeavor","fervor","glamor","rigor","savior","valor","ardor","armor","tumor","vapor","demeanor","favorite","mold","neighbor","neighborhood","parlor","reSuffix","center","liter","fiber","caliber","specter","meter","theater","somber","luster","meager","kilometer","saber","maneuver","izeSuffix","_izeSuffix","organiz","steriliz","analyz","centraliz","personaliz","_defineProperty","contextSensitive","license","context","practice","travel","traveler","ER_TO_RE_WORDS","PREFIXES","SUFFIXES","VERB_INDICATORS","capitaliseIfNeeded","prefix","original","replacement","toUpperCase","slice","toLowerCase","walkTextNodes","node","nodeType","Node","TEXT_NODE","parentElement","includes","tagName","nodeValue","text","combinedDictionary","_objectSpread","regex","RegExp","concat","join","Object","keys","replace","match","arguments","length","undefined","base","suffix","words","prevWord","contextWord","find","w","split","auBase","_capitaliseIfNeeded2","_slicedToArray","replacementBase","adjustedSuffix","startsWith","handleErToReReplacement","_capitaliseIfNeeded4","ELEMENT_NODE","childNodes","forEach","document","body","MutationObserver","mutations","mutation","addedNodes","observe","childList","subtree"],"sourceRoot":""}